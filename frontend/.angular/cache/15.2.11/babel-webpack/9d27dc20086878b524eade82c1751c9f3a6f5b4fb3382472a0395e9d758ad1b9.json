{"ast":null,"code":"import _asyncToGenerator from \"/home/alex/FindYourSGR/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from \"@angular/core\";\nimport Config from '@arcgis/core/config';\nimport WebMap from '@arcgis/core/WebMap';\nimport MapView from '@arcgis/core/views/MapView';\nimport GraphicsLayer from \"@arcgis/core/layers/GraphicsLayer\";\nimport Graphic from '@arcgis/core/Graphic';\nimport Point from '@arcgis/core/geometry/Point';\nimport Polyline from '@arcgis/core/geometry/Polyline';\nimport Polygon from '@arcgis/core/geometry/Polygon';\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\nimport FeatureSet from '@arcgis/core/rest/support/FeatureSet';\nimport RouteParameters from '@arcgis/core/rest/support/RouteParameters';\nimport * as route from \"@arcgis/core/rest/route.js\";\nimport Search from \"@arcgis/core/widgets/Search\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/firebase\";\nimport * as i2 from \"src/app/services/superhero-factory\";\nconst _c0 = [\"mapViewNode\"];\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    fbs;\n    sfs;\n    mapLoadedEvent = new EventEmitter();\n    mapViewEl;\n    map;\n    view;\n    graphicsLayer;\n    graphicsLayerStaticPoints;\n    graphicsLayerRoutes;\n    trailheadsLayer;\n    zoom = 10;\n    center = [-118.73682450024377, 34.07817583063242];\n    basemap = \"streets-vector\";\n    loaded = false;\n    directionsElement;\n    userCenterGraphic = null;\n    // firebase sync\n    isConnected = false;\n    subscriptionList = null;\n    subscriptionObj = null;\n    listItems = [];\n    constructor(fbs, sfs) {\n      this.fbs = fbs;\n      this.sfs = sfs;\n    }\n    ngOnInit() {\n      try {\n        this.initializeMap().then(() => {\n          this.loaded = this.view.ready;\n          this.mapLoadedEvent.emit(true);\n          this.addSampleGraphics();\n          this.connectFirebase();\n          this.displayFirebaseDataOnMap();\n          this.startTrackingUserPosition();\n        });\n      } catch (error) {\n        console.error(\"Error loading the map: \", error);\n        alert(\"Error loading the map\");\n      }\n    }\n    connectFirebase() {\n      if (this.isConnected) {\n        return;\n      }\n      this.isConnected = true;\n      this.fbs.connectToDatabase();\n      this.subscriptionList = this.fbs.getChangeFeedList().subscribe(items => {\n        console.log(\"list updated: \", items);\n        this.listItems = items;\n      });\n      this.subscriptionObj = this.fbs.getChangeFeedObject().subscribe(stat => {\n        console.log(\"object updated: \", stat);\n      });\n    }\n    addListItem() {\n      let newItemValue = Math.floor(Math.random() * 100).toString();\n      newItemValue = this.sfs.getName();\n      this.fbs.addListObject(newItemValue);\n    }\n    removeItems() {\n      this.fbs.removeListItems();\n    }\n    disconnectFirebase() {\n      if (this.subscriptionList != null) {\n        this.subscriptionList.unsubscribe();\n      }\n      if (this.subscriptionObj != null) {\n        this.subscriptionObj.unsubscribe();\n      }\n    }\n    addPointToFirebase(lat, lng) {\n      this.fbs.addListObject({\n        latitude: lat,\n        longitude: lng\n      });\n    }\n    startTrackingUserPosition() {\n      setInterval(() => {\n        const center = this.view.center;\n        this.fbs.updateUserPosition({\n          latitude: center.latitude,\n          longitude: center.longitude\n        });\n      }, 1000);\n    }\n    displayFirebaseDataOnMap() {\n      this.subscriptionList = this.fbs.getMapPoints().subscribe(items => {\n        items.forEach(item => {\n          if (item.latitude != null && item.longitude != null) {\n            const point = new Point({\n              longitude: item.longitude,\n              latitude: item.latitude\n            });\n            const pointSymbol = {\n              type: \"simple-marker\",\n              color: [97, 17, 255],\n              outline: {\n                color: [255, 255, 255],\n                width: 1\n              }\n            };\n            const pointGraphic = new Graphic({\n              geometry: point,\n              symbol: pointSymbol\n            });\n            this.graphicsLayerStaticPoints.add(pointGraphic);\n          }\n        });\n        console.log(\"Punctele statice din Firebase afișate pe hartă:\", items);\n      });\n      this.subscriptionObj = this.fbs.getUserPosition().subscribe(position => {\n        if (position && position.latitude != null && position.longitude != null) {\n          const userPoint = new Point({\n            longitude: position.longitude,\n            latitude: position.latitude\n          });\n          const userSymbol = {\n            type: \"simple-marker\",\n            color: [0, 120, 255],\n            outline: {\n              color: [255, 255, 255],\n              width: 1\n            }\n          };\n          const userGraphic = new Graphic({\n            geometry: userPoint,\n            symbol: userSymbol\n          });\n          if (this.userCenterGraphic) {\n            this.graphicsLayerStaticPoints.remove(this.userCenterGraphic);\n          }\n          this.graphicsLayerStaticPoints.add(userGraphic);\n          this.userCenterGraphic = userGraphic;\n          console.log(\"Coordonatele utilizatorului afișate pe hartă:\", position);\n        }\n      });\n    }\n    initializeMap() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          Config.apiKey = \"AAPTxy8BH1VEsoebNVZXo8HurJP5XL48yDX-cAW0ysqARN5fvEJgMDmJHvPA9NIk4Wevr99IpgJOxKkfCQcvGVEVfL4w17yZh86-Eh4CiggjpmBw27sLZJOl7TAeROESp2edX4dbQf5PoDJMZc1JXzuNzsbgOX8KIteaFkdk5pLOqlStd65eVRjrzapERuOLGndjRoyudrrziRpdGGPsqdFdXGXIKZUWpcx68DxX-hTOJ4E.AT1_rrHRS8gn\";\n          const mapProperties = {\n            basemap: _this.basemap\n          };\n          _this.map = new WebMap(mapProperties);\n          _this.addFeatureLayers();\n          _this.addGraphicsLayer();\n          const mapViewProperties = {\n            container: _this.mapViewEl.nativeElement,\n            center: _this.center,\n            zoom: _this.zoom,\n            map: _this.map\n          };\n          _this.view = new MapView(mapViewProperties);\n          _this.view.on(\"click\", event => {\n            const point = _this.view.toMap({\n              x: event.x,\n              y: event.y\n            });\n            if (point) {\n              _this.addPointToFirebase(point.latitude, point.longitude);\n            }\n          });\n          yield _this.view.when();\n          console.log(\"ArcGIS map loaded\");\n          _this.addRouting();\n          _this.addSearchWidget();\n          return _this.view;\n        } catch (error) {\n          console.error(\"Error loading the map: \", error);\n          alert(\"Error loading the map\");\n        }\n      })();\n    }\n    addSampleGraphics() {\n      // Exemplu de punct grafic în Los Angeles\n      const point = new Point({\n        longitude: -118.80657463861,\n        latitude: 34.0005930608889\n      });\n      const pointSymbol = {\n        type: \"simple-marker\",\n        color: [226, 119, 40],\n        outline: {\n          color: [255, 255, 255],\n          width: 1\n        } // White outline\n      };\n      const pointGraphic = new Graphic({\n        geometry: point,\n        symbol: pointSymbol\n      });\n      this.graphicsLayer.add(pointGraphic);\n      // Exemplu de linie grafică între două puncte din zona Los Angeles\n      const polyline = new Polyline({\n        paths: [[[-118.821527826096, 34.0139576938577], [-118.814893761649, 34.0080602407843], [-118.808878330345, 34.0016642996246]]]\n      });\n      const lineSymbol = {\n        type: \"simple-line\",\n        color: [226, 119, 40],\n        width: 2\n      };\n      const polylineGraphic = new Graphic({\n        geometry: polyline,\n        symbol: lineSymbol\n      });\n      this.graphicsLayer.add(polylineGraphic);\n      // Exemplu de poligon grafic mai mare în zona Los Angeles\n      const polygon = new Polygon({\n        rings: [[[-118.818984489994, 34.0137559967283], [-118.806796597377, 34.0215816298725], [-118.791432890735, 34.0163883241613], [-118.79596686535, 34.008564864635], [-118.808558110679, 34.0035027131376]]]\n      });\n      const polygonSymbol = {\n        type: \"simple-fill\",\n        color: [227, 139, 79, 0.4],\n        outline: {\n          color: [255, 255, 255],\n          width: 1\n        }\n      };\n      const polygonGraphic = new Graphic({\n        geometry: polygon,\n        symbol: polygonSymbol\n      });\n      this.graphicsLayer.add(polygonGraphic);\n      console.log(\"Sample graphics added to map\");\n    }\n    addSearchWidget() {\n      const searchWidget = new Search({\n        view: this.view\n      });\n      this.view.ui.add(searchWidget, \"top-right\");\n    }\n    addFeatureLayers() {\n      this.trailheadsLayer = new FeatureLayer({\n        url: \"https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0\",\n        outFields: ['*']\n      });\n      this.map.add(this.trailheadsLayer);\n      const trailsLayer = new FeatureLayer({\n        url: \"https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trails/FeatureServer/0\"\n      });\n      this.map.add(trailsLayer, 0);\n      const parksLayer = new FeatureLayer({\n        url: \"https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Parks_and_Open_Space/FeatureServer/0\"\n      });\n      this.map.add(parksLayer, 0);\n      console.log(\"Feature layers added\");\n    }\n    addGraphicsLayer() {\n      this.graphicsLayer = new GraphicsLayer();\n      this.map.add(this.graphicsLayer);\n      this.graphicsLayerRoutes = new GraphicsLayer();\n      this.map.add(this.graphicsLayerRoutes);\n      this.graphicsLayerStaticPoints = new GraphicsLayer();\n      this.map.add(this.graphicsLayerStaticPoints);\n      this.graphicsLayerStaticPoints = new GraphicsLayer();\n      this.map.add(this.graphicsLayerStaticPoints);\n    }\n    addRouting() {\n      const routeUrl = \"https://route-api.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World\";\n      this.view.on(\"click\", event => {\n        this.view.hitTest(event).then(elem => {\n          if (elem && elem.results && elem.results.length > 0) {\n            let point = elem.results.find(e => e.layer === this.trailheadsLayer)?.mapPoint;\n            if (point) {\n              console.log(\"get selected point: \", elem, point);\n              if (this.graphicsLayerStaticPoints.graphics.length === 0) {\n                this.addPoint(point.latitude, point.longitude);\n              } else if (this.graphicsLayerStaticPoints.graphics.length === 1) {\n                this.addPoint(point.latitude, point.longitude);\n                this.calculateRoute(routeUrl);\n              } else {\n                this.removePoints();\n              }\n            }\n          }\n        });\n      });\n    }\n    addPoint(lat, lng) {\n      let point = new Point({\n        longitude: lng,\n        latitude: lat\n      });\n      const simpleMarkerSymbol = {\n        type: \"simple-marker\",\n        color: [226, 119, 40],\n        outline: {\n          color: [255, 255, 255],\n          width: 1\n        }\n      };\n      let pointGraphic = new Graphic({\n        geometry: point,\n        symbol: simpleMarkerSymbol\n      });\n      this.graphicsLayerStaticPoints.add(pointGraphic);\n    }\n    removePoints() {\n      this.graphicsLayerStaticPoints.removeAll();\n    }\n    removeRoutes() {\n      this.graphicsLayerRoutes.removeAll();\n    }\n    calculateRoute(routeUrl) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const routeParams = new RouteParameters({\n          stops: new FeatureSet({\n            features: _this2.graphicsLayerStaticPoints.graphics.toArray()\n          }),\n          returnDirections: true\n        });\n        try {\n          const data = yield route.solve(routeUrl, routeParams);\n          _this2.displayRoute(data);\n        } catch (error) {\n          console.error(\"Error calculating route: \", error);\n          alert(\"Error calculating route\");\n        }\n      })();\n    }\n    displayRoute(data) {\n      for (const result of data.routeResults) {\n        result.route.symbol = {\n          type: \"simple-line\",\n          color: [5, 150, 255],\n          width: 3\n        };\n        this.graphicsLayerRoutes.graphics.add(result.route);\n      }\n      if (data.routeResults.length > 0) {\n        this.showDirections(data.routeResults[0].directions.features);\n      } else {\n        alert(\"No directions found\");\n      }\n    }\n    clearRouter() {\n      if (this.view) {\n        // Remove all graphics related to routes\n        this.removeRoutes();\n        this.removePoints();\n        console.log(\"Route cleared\");\n        this.view.ui.remove(this.directionsElement);\n        this.view.ui.empty(\"top-right\");\n        console.log(\"Directions cleared\");\n      }\n    }\n    showDirections(features) {\n      this.directionsElement = document.createElement(\"ol\");\n      this.directionsElement.classList.add(\"esri-widget\", \"esri-widget--panel\", \"esri-directions__scroller\");\n      this.directionsElement.style.marginTop = \"0\";\n      this.directionsElement.style.padding = \"15px 15px 15px 30px\";\n      features.forEach((result, i) => {\n        const direction = document.createElement(\"li\");\n        direction.innerHTML = `${result.attributes.text} (${result.attributes.length} miles)`;\n        this.directionsElement.appendChild(direction);\n      });\n      this.view.ui.empty(\"top-right\");\n      this.view.ui.add(this.directionsElement, \"top-right\");\n    }\n    ngOnDestroy() {\n      this.disconnectFirebase();\n      if (this.view) {\n        this.view.container = null;\n      }\n    }\n    static ɵfac = function MapComponent_Factory(t) {\n      return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.FirebaseService), i0.ɵɵdirectiveInject(i2.SuperheroFactoryService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MapComponent,\n      selectors: [[\"app-map\"]],\n      viewQuery: function MapComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapViewEl = _t.first);\n        }\n      },\n      outputs: {\n        mapLoadedEvent: \"mapLoadedEvent\"\n      },\n      decls: 5,\n      vars: 0,\n      consts: [[1, \"container\"], [1, \"map-view\"], [\"mapViewNode\", \"\"], [1, \"fab\", 3, \"click\"]],\n      template: function MapComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵelement(1, \"div\", 1, 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_3_listener() {\n            return ctx.clearRouter();\n          });\n          i0.ɵɵtext(4, \"x\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\".container[_ngcontent-%COMP%]{display:flex;height:calc(100vh - 64px);width:100%}.map-view[_ngcontent-%COMP%]{flex:1;height:100%}.fab[_ngcontent-%COMP%]{position:fixed;bottom:40px;right:20px;background-color:#e74c3c;color:#fff;border:none;border-radius:50%;width:50px;height:50px;display:flex;align-items:center;justify-content:center;font-size:24px;cursor:pointer;z-index:1100;transition:background-color .3s}.fab[_ngcontent-%COMP%]:hover{background-color:#c0392b}\"]\n    });\n  }\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}