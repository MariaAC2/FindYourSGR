{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport { impedanceAttributeNameJsonMap as t } from \"../support/networkEnums.js\";\nfunction r(r, i) {\n  if (null == r) return null;\n  const e = {},\n    s = new RegExp(`^${i}`, \"i\");\n  for (const n of Object.keys(r)) if (s.test(n)) {\n    const s = n.substring(i.length);\n    e[t.fromJSON(s)] = r[n];\n  }\n  return e;\n}\nfunction i(r, i, e) {\n  if (null != r) {\n    i.attributes || (i.attributes = {});\n    for (const s in r) {\n      const n = t.toJSON(s);\n      i.attributes[`${e}${n}`] = r[s];\n    }\n  }\n}\nfunction e(r) {\n  const i = {};\n  for (const e of Object.keys(r)) {\n    const s = e;\n    i[t.fromJSON(s)] = r[e];\n  }\n  return i;\n}\nfunction s(r) {\n  const i = {};\n  for (const e of Object.keys(r)) {\n    const s = e;\n    i[t.toJSON(s)] = r[e];\n  }\n  return i;\n}\nfunction n(t, r) {\n  return null == t || null == r ? null : Math.round((t - r) / 6e4);\n}\nfunction o(t) {\n  const r = t.toJSON(),\n    i = r;\n  return i.accumulateAttributeNames &&= r.accumulateAttributeNames?.join(), i.attributeParameterValues &&= JSON.stringify(r.attributeParameterValues), i.barriers &&= JSON.stringify(r.barriers), i.outSR &&= r.outSR?.wkid, i.overrides &&= JSON.stringify(r.overrides), i.polygonBarriers &&= JSON.stringify(r.polygonBarriers), i.polylineBarriers &&= JSON.stringify(r.polylineBarriers), i.restrictionAttributeNames &&= r.restrictionAttributeNames?.join(), i.stops &&= JSON.stringify(r.stops), i.travelMode &&= JSON.stringify(r.travelMode), i;\n}\nfunction a(t) {\n  const r = t.toJSON(),\n    i = r;\n  return i.accumulateAttributeNames &&= r.accumulateAttributeNames?.join(), i.attributeParameterValues &&= JSON.stringify(r.attributeParameterValues), i.barriers &&= JSON.stringify(r.barriers), i.facilities &&= JSON.stringify(r.facilities), i.incidents &&= JSON.stringify(r.incidents), i.outSR &&= r.outSR?.wkid, i.overrides &&= JSON.stringify(r.overrides), i.polygonBarriers &&= JSON.stringify(r.polygonBarriers), i.polylineBarriers &&= JSON.stringify(r.polylineBarriers), i.restrictionAttributeNames &&= r.restrictionAttributeNames?.join(), i.travelMode &&= JSON.stringify(r.travelMode), i;\n}\nfunction u(t) {\n  const r = t.toJSON(),\n    i = r;\n  return i.accumulateAttributeNames &&= r.accumulateAttributeNames?.join(), i.attributeParameterValues &&= JSON.stringify(r.attributeParameterValues), i.barriers &&= JSON.stringify(r.barriers), i.defaultBreaks &&= r.defaultBreaks?.join(), i.excludeSourcesFromPolygons &&= r.excludeSourcesFromPolygons?.join(), i.facilities &&= JSON.stringify(r.facilities), i.outSR &&= r.outSR?.wkid, i.overrides &&= JSON.stringify(r.overrides), i.polygonBarriers &&= JSON.stringify(r.polygonBarriers), i.polylineBarriers &&= JSON.stringify(r.polylineBarriers), i.restrictionAttributeNames &&= r.restrictionAttributeNames?.join(), i.travelMode &&= JSON.stringify(r.travelMode), i;\n}\nexport { a as closestFacilityParametersToQueryParameters, s as fromKebabImpedanceAttributes, r as getPrefixedProperties, n as getTimezoneOffset, o as routeParametersToQueryParameters, u as serviceAreaParametersToQueryParameters, i as setPrefixedProperties, e as toKebabImpedanceAttributes };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}